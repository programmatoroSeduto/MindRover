


ORDINE CON CUI SCRIVERE LE PROPRIETA' NEL CSS:
    
	
	layout
    //nota: meglio usare le proprietà di layout nelle regole @media 
        display
            (none, block, inline, inline-block)
            (grid)
                //GRID ESPLITICA
                grid-template-columns   //(n valori = n colonne) larghezza di una singola colonna
                    ESEMPIO
                        grid-template-columns: auto auto auto auto //4 colonne di misura "auto"
                    nota: è un "template", è la colona (o riga) tipica della tabella
                    unità di misura "flexible": 1fr, frazione dello spazio occupabile
                grid-template-rows    //larghezza di una singola riga
                //nota: per scrivere meno, usa repeat(quante volte, valore da ripetere) come un preprocessore

                //GRID IMPLICITA
                grid-auto-columns   //un solo valore; quanti ce ne stanno se fisso la dimensione di un elemento? boh che ne so? fai te ("auto")
                grid-auto-rows
                //per limitare i valori, usa minmax(min, max) come valore; è come un "auto" ma limitato

                grid-gap   //spazio tra le celle
                //oppure, più dettagliato,
                grid-column-gap
                grid-row-gap
            (elemento grid)
                grid-column   //da quale colonna(inclusa) a quale colonna(non inclusa) disporre l'elemento
                grid-row   //da quale riga(inclusa) a quale riga(non inclusa) disporre l'elemento
                //nota: la stessa cosa si può fare con grid-area...

            (flex)
                flex-direction   //secondo quale ordine disporre il contenuto
                flex-wrap   //disposizione automatica delle linee (wrap) o tutto su una sola linea (nowrap)?
                justify-content   //disponi rispetto all'asse orizzontale
                align-items   //disponi rispetto all'asse verticale
            (elemento flexible)
                flex   //quanto spazio riservare ad una cella, utile per il wrap
                flex-grow   //di quante volte deve crescere l'elemento rispetto alla norma
                flex-shrink   //di quante volte l'elemento si rimpicciolisce rispetto alla norma
                flex-basis   //dimensioni minime per l'elemento
				
				
        float 
            clear   //sposta l'oggetto selezionato dopo il float(altrimenti, non usare il clear!)
            //ricorda il clearfix hack per far rientrare un elemento nel suo riquadro! pui evitarlo però se usi la seguente:
            overflow   //solo nell'elemento che contiene il float; fai rientrare il float nel suo riquadro
			
			
        position
            (default: static)
            (relative, absolute, fixed, sticky)
                top     //rispetto a ..., non in senso di coordinate!
                right
                bottom
                left
                z-index   //per l'ordine di sovrapposizione
				
				
        (layout multicolumn)
            column-count   //da assegnare al contenitore; quante colonne creare? dimensionamento automatico rispetto al contenitore
            column-width   //sempre al contenitore; specifica quanto devono essere larghe le colonne
            
            column-gap   //spazio tra colonne
            column-rule   //stile linea tra le colonne (non inserire se non vuoi una linea separatrice)
            
            column-span   //quante colonne deve occupare un certo elemento; unico valore: all
    
	
	rappresentazione(box model, background)
    //nota: tutte queste sono sufficienti anche per l'elaborazione di immagini
        misure rispetto al modello ridotto
            box-sizing   //standard: content-box, ridotto: border-box
		
		
        content
           //proprietà non applicate per gli elementi inline, solo per block e inline-block
           width
           height

           //oppure...
           min-width
           max-width
           min-height
           max-height
		   
		   
        padding
            //convenzione: tob, right, bottom, left
            //solo dimensioni padding
            padding-top
            padding-right
            padding-bottom
            padding-left
			
			
        border
            //convenzione: dimensioni, colore, stile
            border-top-width
            border-top-color
            border-top-style
            border-right-width
            border-right-color
            border-right-style
            border-bottom-width
            border-bottom-color
            border-bottom-style
            border-left-width
            border-left-color
            border-left-style

            //o eventualmente le shorthand; usa la convenzione
            border-top
            border-right
            border-bottom
            border-left

            //bordi arrotondati
            border-radius   //shorthand
            border-top-left-radius
            border-top-right-radius
            border-bottom-left-radius
            border-bottom-right-radius
			
			
        margin
            //occhio al margin collapse!
            //solo dimensioni margine
            margin-top
            margin-right
            margin-bottom
            margin-left
			
			
        background
            background-color   //monocromatico, oppure...
            background-image   //immagine di sfondo; usa anche i gradienti; nche più immagini contemporaneamente
			opacity
			
            background-repeat   //no-repeat, repeat-x, repeat-y, repeat(default)
			
            background-size   //key: cover, contain
            background-position   //key: top, center, bottom, right, left
			
            background-attachment   //key: scroll(meglio local), fixed
			
			
        overflow e fit
            overflow   //key: visible, hidden, scroll, auto
            overflow-x
            overflow-y
            object-fit   //key: cover, contain, fill (modifica le dimensioni intrinseche dell'immagine)
            
    
	elaborazione testo
        //di base
        font-family   //web-safe: sans-serif, serif, monospace, cursive, fantasy

        //modificatori
        font-size   //dimensioni del testo
        text-transform   //uppercase, lowercase, capitalize, full-width
        letter-spacing
        word-spacing
        text-align   //key: center, right, left, justify ... come in word!
        color   //colore del testo
        font-style   //corsivo o no? usa italic; key: normal
        font-weight   //grassetto o no? usa bold
        text-underline   //sottolinea o no? none, underline, overline, line-through
		
		line-height




































